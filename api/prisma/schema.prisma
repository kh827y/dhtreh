datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum WalletType {
  POINTS
}

enum HoldMode {
  REDEEM
  EARN
}

enum HoldStatus {
  PENDING
  COMMITTED
  CANCELED
}

enum DeviceType {
  SMART
  PC_POS
  VIRTUAL
}

enum StaffRole {
  ADMIN
  MANAGER
  CASHIER
}

enum TxnType {
  EARN
  REDEEM
  REFUND
  ADJUST
}

model Merchant {
  id        String            @id @default(cuid())
  name      String
  settings  MerchantSettings?
  wallets   Wallet[]
  holds     Hold[]
  txns      Transaction[]
  createdAt DateTime          @default(now())
  Receipt   Receipt[]
  outlets   Outlet[]
  devices   Device[]
  staff     Staff[]
  consents  Consent[]
}

model MerchantSettings {
  merchantId     String   @id
  merchant       Merchant @relation(fields: [merchantId], references: [id])
  earnBps        Int      @default(500)
  redeemLimitBps Int      @default(5000)
  qrTtlSec       Int      @default(120)
  webhookUrl     String?
  webhookSecret  String?
  webhookKeyId   String?
  redeemCooldownSec Int   @default(0)
  earnCooldownSec   Int   @default(0)
  redeemDailyCap    Int?
  earnDailyCap      Int?
  requireJwtForQuote Boolean @default(false)
  requireBridgeSig   Boolean @default(false)
  bridgeSecret       String?
  rulesJson          Json?
  updatedAt      DateTime @default(now())
}

model IdempotencyKey {
  id         String   @id @default(cuid())
  merchantId String
  key        String
  response   Json
  createdAt  DateTime @default(now())
  expiresAt  DateTime?

  @@unique([merchantId, key])
  @@index([merchantId, createdAt])
}

model Consent {
  merchantId String
  customerId String
  consentAt  DateTime
  createdAt  DateTime @default(now())

  merchant   Merchant @relation(fields: [merchantId], references: [id])
  customer   Customer @relation(fields: [customerId], references: [id])

  @@id([merchantId, customerId])
}

model Customer {
  id        String        @id @default(cuid())
  phone     String?       @unique
  tgId      String?       @unique
  wallets   Wallet[]
  holds     Hold[]
  txns      Transaction[]
  createdAt DateTime      @default(now())
  Receipt   Receipt[]
  consents  Consent[]
}

model Wallet {
  id         String     @id @default(cuid())
  customerId String
  customer   Customer   @relation(fields: [customerId], references: [id])
  merchantId String
  merchant   Merchant   @relation(fields: [merchantId], references: [id])
  type       WalletType
  balance    Int        @default(0)
  createdAt  DateTime   @default(now())

  @@unique([customerId, merchantId, type])
}

model Hold {
  id           String     @id @default(cuid())
  customerId   String
  customer     Customer   @relation(fields: [customerId], references: [id])
  merchantId   String
  merchant     Merchant   @relation(fields: [merchantId], references: [id])
  mode         HoldMode
  redeemAmount Int        @default(0)
  earnPoints   Int        @default(0)
  status       HoldStatus @default(PENDING)
  orderId      String?
  receiptId    String?
  total         Int?
  eligibleTotal Int?
  qrJti        String?    @unique   // <— НОВОЕ: один hold на один QR
  expiresAt    DateTime?
  outletId     String?
  deviceId     String?
  staffId      String?
  createdAt    DateTime   @default(now())

  outlet       Outlet?    @relation(fields: [outletId], references: [id], onDelete: SetNull)
  device       Device?    @relation(fields: [deviceId], references: [id], onDelete: SetNull)
  staff        Staff?     @relation(fields: [staffId], references: [id], onDelete: SetNull)

  @@index([customerId, status])
  @@index([merchantId, status])
  @@index([merchantId, outletId])
  @@index([merchantId, deviceId])
  @@index([merchantId, staffId])
}

model Receipt {
  id         String   @id @default(cuid())
  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id])
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])

  orderId       String
  receiptNumber String?
  total         Int
  eligibleTotal Int
  redeemApplied Int      @default(0) // сколько списали баллами
  earnApplied   Int      @default(0) // сколько начислили
  createdAt     DateTime @default(now())
  outletId      String?
  deviceId      String?
  staffId       String?

  outlet       Outlet?    @relation(fields: [outletId], references: [id], onDelete: SetNull)
  device       Device?    @relation(fields: [deviceId], references: [id], onDelete: SetNull)
  staff        Staff?     @relation(fields: [staffId], references: [id], onDelete: SetNull)

  @@unique([merchantId, orderId])
  @@index([merchantId, createdAt])
  @@index([merchantId, outletId])
  @@index([merchantId, deviceId])
  @@index([merchantId, staffId])
}

model Transaction {
  id         String   @id @default(cuid())
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])
  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id])
  type       TxnType
  amount     Int
  orderId    String?
  createdAt  DateTime @default(now())
  outletId   String?
  deviceId   String?
  staffId    String?

  outlet       Outlet?    @relation(fields: [outletId], references: [id], onDelete: SetNull)
  device       Device?    @relation(fields: [deviceId], references: [id], onDelete: SetNull)
  staff        Staff?     @relation(fields: [staffId], references: [id], onDelete: SetNull)

  @@index([customerId, createdAt])
  @@index([merchantId, createdAt])
  @@index([merchantId, outletId])
  @@index([merchantId, deviceId])
  @@index([merchantId, staffId])
}

model QrNonce {
  jti        String   @id                  // уникальный ID токена (JTI)
  customerId String
  merchantId String?
  issuedAt   DateTime
  expiresAt  DateTime
  usedAt     DateTime?
  createdAt  DateTime @default(now())

  @@index([merchantId, usedAt])
}

model EventOutbox {
  id          String   @id @default(cuid())
  merchantId  String
  eventType   String
  payload     Json
  status      String   @default("PENDING")
  retries     Int      @default(0)
  nextRetryAt DateTime?
  lastError   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([status, nextRetryAt])
  @@index([merchantId, createdAt])
}

model Outlet {
  id          String    @id @default(cuid())
  merchantId  String
  merchant    Merchant  @relation(fields: [merchantId], references: [id])
  name        String
  address     String?
  createdAt   DateTime  @default(now())

  @@index([merchantId])

  // обратные связи
  devices     Device[]
  holds       Hold[]
  receipts    Receipt[]
  txns        Transaction[]
}

model Device {
  id          String     @id @default(cuid())
  merchantId  String
  merchant    Merchant   @relation(fields: [merchantId], references: [id])
  outletId    String?
  outlet      Outlet?    @relation(fields: [outletId], references: [id], onDelete: SetNull)
  type        DeviceType
  label       String?
  lastSeenAt  DateTime?
  bridgeSecret String?
  createdAt   DateTime   @default(now())

  @@index([merchantId])
  @@index([merchantId, outletId])

  // обратные связи
  holds     Hold[]
  receipts  Receipt[]
  txns      Transaction[]
}

model Staff {
  id          String     @id @default(cuid())
  merchantId  String
  merchant    Merchant   @relation(fields: [merchantId], references: [id])
  login       String?
  email       String?
  role        StaffRole  @default(CASHIER)
  status      String     @default("ACTIVE")
  hash        String?
  apiKeyHash  String?
  createdAt   DateTime   @default(now())

  @@index([merchantId])
  @@unique([merchantId, login])
  @@index([merchantId, apiKeyHash])

  // обратные связи
  holds     Hold[]
  receipts  Receipt[]
  txns      Transaction[]
}

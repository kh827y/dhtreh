datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Gifts catalog (spend points for internal rewards)
model Gift {
  id          String   @id @default(cuid())
  merchantId  String
  title       String
  description String?
  imageUrl    String?
  costPoints  Int
  active      Boolean  @default(true)
  periodFrom  DateTime?
  periodTo    DateTime?
  perCustomerLimit Int?
  inventory   Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  merchant    Merchant @relation(fields: [merchantId], references: [id])
  redemptions GiftRedemption[]

  @@index([merchantId, active])
}

model GiftRedemption {
  id          String   @id @default(cuid())
  giftId      String
  merchantId  String
  customerId  String
  code        String   @unique
  state       String   @default("REDEEMED") // RESERVED | REDEEMED | CANCELED
  createdAt   DateTime @default(now())
  expiresAt   DateTime?
  redeemedAt  DateTime?
  canceledAt  DateTime?

  gift        Gift     @relation(fields: [giftId], references: [id])
  merchant    Merchant @relation(fields: [merchantId], references: [id])
  customer    Customer @relation(fields: [customerId], references: [id])

  @@index([merchantId, customerId, createdAt])
}

generator client {
  provider = "prisma-client-js"
}

enum WalletType {
  POINTS
}

enum HoldMode {
  REDEEM
  EARN
}

enum HoldStatus {
  PENDING
  COMMITTED
  CANCELED
}

enum DeviceType {
  SMART
  PC_POS
  VIRTUAL
}

enum StaffRole {
  ADMIN
  MANAGER
  CASHIER
}

enum TxnType {
  EARN
  REDEEM
  REFUND
  ADJUST
  CAMPAIGN
  REFERRAL
}

enum LedgerAccount {
  CUSTOMER_BALANCE
  MERCHANT_LIABILITY
  RESERVED
}

model Merchant {
  id        String            @id @default(cuid())
  name      String
  telegramWebhookSecret String?
  telegramBotEnabled    Boolean   @default(false)
  telegramBotToken      String?
  rating    Float?
  logo      String?
  settings  MerchantSettings?
  wallets   Wallet[]
  holds     Hold[]
  transactions Transaction[]
  createdAt DateTime          @default(now())
  Receipt   Receipt[]
  outlets   Outlet[]
  devices   Device[]
  staff     Staff[]
  consents  Consent[]
  telegramBot TelegramBot?
  subscription Subscription?
  fraudChecks FraudCheck[]
  integrations Integration[]
  customerSegments CustomerSegment[]
  campaigns Campaign[]
  reviewCount Int @default(0)
  // back-relations
  campaignUsages CampaignUsage[]
  reviews        Review[]
  referralPrograms ReferralProgram[]
  vouchers         Voucher[]
  // analytics back-relations
  customerStats     CustomerStats[]
  kpiDaily          MerchantKpiDaily[]
  // gifts
  gifts             Gift[]
  giftRedemptions   GiftRedemption[]
}

model MerchantSettings {
  merchantId     String   @id
  merchant       Merchant @relation(fields: [merchantId], references: [id])
  earnBps        Int      @default(500)
  redeemLimitBps Int      @default(5000)
  qrTtlSec       Int      @default(120)
  webhookUrl     String?
  webhookSecret  String?
  webhookKeyId   String?
  webhookSecretNext String?
  webhookKeyIdNext  String?
  useWebhookNext    Boolean  @default(false)
  pointsTtlDays     Int?
  earnDelayDays     Int?    // задержка начисления (в днях)
  redeemCooldownSec Int   @default(0)
  earnCooldownSec   Int   @default(0)
  redeemDailyCap    Int?
  earnDailyCap      Int?
  requireJwtForQuote Boolean @default(false)
  requireBridgeSig   Boolean @default(false)
  bridgeSecret       String?
  bridgeSecretNext   String?
  rulesJson          Json?
  requireStaffKey    Boolean @default(false)
  // Telegram miniapp per merchant
  telegramBotToken   String?
  telegramBotUsername String?
  telegramStartParamRequired Boolean @default(false)
  miniappBaseUrl     String?
  miniappThemePrimary String?
  miniappThemeBg      String?
  miniappLogoUrl      String?
  outboxPausedUntil   DateTime?
  smsSignature        String?
  phone               String?
  monthlyReports      Boolean  @default(false)
  updatedAt      DateTime @default(now())
}

model IdempotencyKey {
  id         String   @id @default(cuid())
  merchantId String
  key        String
  response   Json
  createdAt  DateTime @default(now())
  expiresAt  DateTime?

  @@unique([merchantId, key])
  @@index([merchantId, createdAt])
  @@index([expiresAt])
}

model Consent {
  merchantId String
  customerId String
  consentAt  DateTime
  createdAt  DateTime @default(now())

  merchant   Merchant @relation(fields: [merchantId], references: [id])
  customer   Customer @relation(fields: [customerId], references: [id])

  @@id([merchantId, customerId])
}

model Customer {
  id        String        @id @default(cuid())
  phone     String?       @unique
  tgId      String?       @unique
  email     String?       @unique
  name      String?
  birthday  DateTime?
  gender    String?
  city      String?
  tags      String[]
  metadata  Json?
  wallets   Wallet[]
  holds     Hold[]
  transactions Transaction[]
  createdAt DateTime      @default(now())
  Receipt   Receipt[]
  consents  Consent[]
  segments  SegmentCustomer[]
  // back-relations
  campaignUsages    CampaignUsage[]
  voucherUsages     VoucherUsage[]
  reviews           Review[]
  reviewReactions   ReviewReaction[]
  referralsAsReferrer Referral[] @relation("ReferralReferrer")
  referralsAsReferee  Referral[] @relation("ReferralReferee")
  pushDevices       PushDevice[]
  customerStats     CustomerStats[]
  giftRedemptions   GiftRedemption[]
}

model Wallet {
  id         String     @id @default(cuid())
  customerId String
  customer   Customer   @relation(fields: [customerId], references: [id])
  merchantId String
  merchant   Merchant   @relation(fields: [merchantId], references: [id])
  type       WalletType
  balance    Int        @default(0)
  createdAt  DateTime   @default(now())

  @@unique([customerId, merchantId, type])
}

model Hold {
  id           String     @id @default(cuid())
  customerId   String
  customer     Customer   @relation(fields: [customerId], references: [id])
  merchantId   String
  merchant     Merchant   @relation(fields: [merchantId], references: [id])
  mode         HoldMode
  redeemAmount Int        @default(0)
  earnPoints   Int        @default(0)
  status       HoldStatus @default(PENDING)
  orderId      String?
  receiptId    String?
  total         Int?
  eligibleTotal Int?
  qrJti        String?    @unique   // <— НОВОЕ: один hold на один QR
  expiresAt    DateTime?
  outletId     String?
  deviceId     String?
  staffId      String?
  createdAt    DateTime   @default(now())

  outlet       Outlet?    @relation(fields: [outletId], references: [id], onDelete: SetNull)
  device       Device?    @relation(fields: [deviceId], references: [id], onDelete: SetNull)
  staff        Staff?     @relation(fields: [staffId], references: [id], onDelete: SetNull)

  @@index([customerId, status])
  @@index([merchantId, status])
  @@index([merchantId, outletId])
  @@index([merchantId, deviceId])
  @@index([merchantId, staffId])
}

model Receipt {
  id         String   @id @default(cuid())
  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id])
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])

  orderId       String
  receiptNumber String?
  total         Int
  eligibleTotal Int
  redeemApplied Int      @default(0) // сколько списали баллами
  earnApplied   Int      @default(0) // сколько начислили
  createdAt     DateTime @default(now())
  outletId      String?
  deviceId      String?
  staffId       String?

  outlet       Outlet?    @relation(fields: [outletId], references: [id], onDelete: SetNull)
  device       Device?    @relation(fields: [deviceId], references: [id], onDelete: SetNull)
  staff        Staff?     @relation(fields: [staffId], references: [id], onDelete: SetNull)

  @@unique([merchantId, orderId])
  @@index([merchantId, createdAt])
  @@index([merchantId, outletId])
  @@index([merchantId, deviceId])
  @@index([merchantId, staffId])
}

model Transaction {
  id         String   @id @default(cuid())
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])
  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id])
  type       TxnType
  amount     Int
  orderId    String?
  createdAt  DateTime @default(now())
  outletId   String?
  deviceId   String?
  staffId    String?

  outlet       Outlet?    @relation(fields: [outletId], references: [id], onDelete: SetNull)
  device       Device?    @relation(fields: [deviceId], references: [id], onDelete: SetNull)
  staff        Staff?     @relation(fields: [staffId], references: [id], onDelete: SetNull)

  @@index([customerId, createdAt])
  @@index([merchantId, createdAt])
  @@index([merchantId, outletId])
  @@index([merchantId, deviceId])
  @@index([merchantId, staffId])
  @@index([merchantId, customerId, type, createdAt])
}

model QrNonce {
  jti        String   @id                  // уникальный ID токена (JTI)
  customerId String
  merchantId String?
  issuedAt   DateTime
  expiresAt  DateTime
  usedAt     DateTime?
  createdAt  DateTime @default(now())

  @@index([merchantId, usedAt])
}

model EventOutbox {
  id          String   @id @default(cuid())
  merchantId  String
  eventType   String
  payload     Json
  status      String   @default("PENDING")
  retries     Int      @default(0)
  nextRetryAt DateTime?
  lastError   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([status, nextRetryAt])
  @@index([merchantId, createdAt])
}

model Outlet {
  id          String    @id @default(cuid())
  merchantId  String
  merchant    Merchant  @relation(fields: [merchantId], references: [id])
  name        String
  address     String?
  createdAt   DateTime  @default(now())

  @@index([merchantId])

  // обратные связи
  devices     Device[]
  holds       Hold[]
  receipts    Receipt[]
  txns        Transaction[]
}

model Device {
  id          String     @id @default(cuid())
  merchantId  String
  merchant    Merchant   @relation(fields: [merchantId], references: [id])
  outletId    String?
  outlet      Outlet?    @relation(fields: [outletId], references: [id], onDelete: SetNull)
  type        DeviceType
  label       String?
  lastSeenAt  DateTime?
  bridgeSecret String?
  createdAt   DateTime   @default(now())

  @@index([merchantId])
  @@index([merchantId, outletId])

  // обратные связи
  holds     Hold[]
  receipts  Receipt[]
  txns      Transaction[]
}

model Staff {
  id          String     @id @default(cuid())
  merchantId  String
  merchant    Merchant   @relation(fields: [merchantId], references: [id])
  login       String?
  email       String?
  role        StaffRole  @default(CASHIER)
  status      String     @default("ACTIVE")
  hash        String?
  apiKeyHash  String?
  allowedOutletId String?
  allowedDeviceId String?
  createdAt   DateTime   @default(now())

  @@index([merchantId])
  @@unique([merchantId, login])
  @@index([merchantId, apiKeyHash])

  // обратные связи
  holds     Hold[]
  receipts  Receipt[]
  txns      Transaction[]
  reviewResponses ReviewResponse[]
}

model LedgerEntry {
  id          String         @id @default(cuid())
  merchantId  String
  customerId  String?
  debit       LedgerAccount
  credit      LedgerAccount
  amount      Int
  orderId     String?
  receiptId   String?
  outletId    String?
  deviceId    String?
  staffId     String?
  meta        Json?
  createdAt   DateTime       @default(now())

  @@index([merchantId, createdAt])
  @@index([merchantId, customerId, createdAt])
}

model EarnLot {
  id            String   @id @default(cuid())
  merchantId    String
  customerId    String
  points        Int
  consumedPoints Int     @default(0)
  earnedAt      DateTime
  maturesAt     DateTime?
  expiresAt     DateTime?
  orderId       String?
  receiptId     String?
  outletId      String?
  deviceId      String?
  staffId       String?
  status        String   @default("ACTIVE") // ACTIVE | PENDING
  createdAt     DateTime @default(now())

  @@index([merchantId, customerId, earnedAt])
  @@index([merchantId, expiresAt])
}

model AdminAudit {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  actor       String
  method      String
  path        String
  merchantId  String?
  action      String?
  payload     Json?

  @@index([merchantId, createdAt])
}

model TelegramBot {
  id                String   @id @default(cuid())
  merchantId        String   @unique
  botToken          String   @unique
  botUsername       String   @unique
  botId             String?
  webhookUrl        String?
  webhookSecret     String?
  isActive          Boolean  @default(true)
  welcomeMessage    String?
  menuConfig        Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  merchant          Merchant @relation(fields: [merchantId], references: [id])
}

model Plan {
  id                String   @id @default(cuid())
  name              String
  displayName       String
  price             Int
  currency          String   @default("RUB")
  interval          String
  features          Json
  maxTransactions   Int?
  maxCustomers      Int?
  maxOutlets        Int?
  webhooksEnabled   Boolean  @default(true)
  customBranding    Boolean  @default(false)
  prioritySupport   Boolean  @default(false)
  apiAccess         Boolean  @default(true)
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())

  subscriptions     Subscription[]
}

model Subscription {
  id                String    @id @default(cuid())
  merchantId        String    @unique
  planId            String
  status            String    @default("active")
  currentPeriodStart DateTime
  currentPeriodEnd  DateTime
  cancelAt          DateTime?
  canceledAt        DateTime?
  trialEnd          DateTime?
  metadata          Json?
  autoRenew         Boolean   @default(true)
  lastPaymentId     String?
  reminderSent7Days Boolean   @default(false)
  reminderSent1Day  Boolean   @default(false)
  lastPaymentDate   DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  plan              Plan      @relation(fields: [planId], references: [id])
  merchant          Merchant  @relation(fields: [merchantId], references: [id])
  payments          Payment[]
}

// Junction table for customer segments
model SegmentCustomer {
  id          String   @id @default(cuid())
  segmentId   String
  customerId  String
  createdAt   DateTime @default(now())

  segment     CustomerSegment @relation(fields: [segmentId], references: [id])
  customer    Customer        @relation(fields: [customerId], references: [id])

  @@unique([segmentId, customerId])
}

// Campaign usage tracking
model CampaignUsage {
  id          String   @id @default(cuid())
  campaignId  String
  customerId  String
  merchantId  String?
  rewardType  String?
  rewardValue Int?
  usedAt      DateTime @default(now())
  createdAt   DateTime @default(now())

  campaign    Campaign @relation(fields: [campaignId], references: [id])
  customer    Customer @relation(fields: [customerId], references: [id])
  merchant    Merchant? @relation(fields: [merchantId], references: [id])

  @@index([campaignId])
  @@index([customerId])
}

// Email notifications
model EmailNotification {
  id          String   @id @default(cuid())
  merchantId  String
  customerId  String?
  campaignId  String?
  to          String
  subject     String
  template    String
  variables   Json?
  status      String   @default("PENDING")
  messageId   String?
  sentAt      DateTime?
  error       String?
  metadata    Json?
  createdAt   DateTime @default(now())
}

// Push devices registry
model PushDevice {
  id          String   @id @default(cuid())
  customerId  String
  merchantId  String?
  deviceId    String?
  token       String   @unique
  platform    String
  deviceInfo  Json?
  lastActiveAt DateTime?
  lastUsed    DateTime @default(now())
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  
  customer    Customer @relation(fields: [customerId], references: [id])

  @@unique([customerId, deviceId])
  @@index([customerId])
}

// Push notifications log
model PushNotification {
  id           String   @id @default(cuid())
  merchantId   String
  customerId   String?
  deviceId     String?
  deviceToken  String?
  title        String
  body         String
  type         String?
  campaignId   String?
  data         Json?
  status       String   @default("PENDING")
  messageId    String?
  sentAt       DateTime?
  error        String?
  createdAt    DateTime @default(now())
}

// SMS notifications log
model SmsNotification {
  id          String   @id @default(cuid())
  merchantId  String
  customerId  String?
  phone       String
  message     String
  type        String
  status      String   @default("PENDING")
  provider    String?
  messageId   String?
  cost        Float?   @default(0)
  parts       Int?     @default(1)
  sentAt      DateTime?
  error       String?
  campaignId  String?
  metadata    Json?
  createdAt   DateTime @default(now())
}

// OTP codes
model OtpCode {
  id          String   @id @default(cuid())
  phone       String
  code        String
  type        String?
  attempts    Int      @default(0)
  verified    Boolean  @default(false)
  expiresAt   DateTime
  merchantId  String?
  createdAt   DateTime @default(now())

  @@index([phone])
}

// Customer consent by channel
model CustomerConsent {
  id          String   @id @default(cuid())
  customerId  String
  merchantId  String
  channel     String
  status      String   // e.g. GRANTED / REVOKED
  grantedAt   DateTime @default(now())
  revokedAt   DateTime?
  createdAt   DateTime @default(now())

  @@unique([customerId, merchantId, channel])
}

// Merchant stats for notifications
model MerchantStats {
  id          String   @id @default(cuid())
  merchantId  String  @unique
  smsSent     Int     @default(0)
  smsCost     Float   @default(0)
  pushSent    Int     @default(0)
  pushFailed  Int     @default(0)
  emailSent   Int     @default(0)
  lastUpdated DateTime @default(now())
}

// Referral program
model ReferralProgram {
  id                String   @id @default(cuid())
  merchantId        String
  name              String
  description       String?
  referrerReward    Int
  refereeReward     Int
  maxReferrals      Int?
  validUntil        DateTime?
  isActive          Boolean  @default(true)
  status            String   @default("ACTIVE")
  minPurchaseAmount Int      @default(0)
  expiryDays        Int      @default(30)
  createdAt         DateTime @default(now())

  merchant          Merchant @relation(fields: [merchantId], references: [id])
  referrals         Referral[]
  personalCodes     PersonalReferralCode[]
}

model Referral {
  id            String   @id @default(cuid())
  programId     String
  referrerId    String
  refereeId     String?
  code          String   @unique
  status        String   @default("PENDING")
  activatedAt   DateTime?
  completedAt   DateTime?
  purchaseAmount Int?
  refereePhone  String?
  refereeEmail  String?
  channel       String?
  expiresAt     DateTime?
  createdAt     DateTime @default(now())

  program       ReferralProgram @relation(fields: [programId], references: [id])
  referrer      Customer        @relation("ReferralReferrer", fields: [referrerId], references: [id])
  referee       Customer?       @relation("ReferralReferee", fields: [refereeId], references: [id])
}

// Personal referral codes per customer
model PersonalReferralCode {
  id          String   @id @default(cuid())
  customerId  String
  merchantId  String
  code        String   @unique
  isActive    Boolean  @default(true)
  programId   String?
  createdAt   DateTime @default(now())

  program     ReferralProgram? @relation(fields: [programId], references: [id])

  @@unique([customerId, merchantId])
}

// Voucher models
model Voucher {
  id                String   @id @default(cuid())
  merchantId        String
  name              String
  description       String?
  type              String    // DISCOUNT, GIFT_CARD, PROMO_CODE
  valueType         String    // PERCENTAGE, FIXED_AMOUNT, POINTS
  value             Int
  minPurchase       Int?
  maxUses           Int?
  usedCount         Int       @default(0)
  validFrom         DateTime?
  validUntil        DateTime?
  isActive          Boolean   @default(true)
  metadata          Json?
  status            String    @default("ACTIVE")
  quantity          Int       @default(1)
  remainingQuantity Int       @default(1)
  maxUsesPerCustomer Int?
  maxTotalUses      Int?
  minPurchaseAmount Int?
  applicableProducts String[]
  applicableCategories String[]
  totalUsed         Int       @default(0)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  merchant   Merchant @relation(fields: [merchantId], references: [id])
  codes             VoucherCode[]
  usages            VoucherUsage[]
}

model VoucherCode {
  id          String   @id @default(cuid())
  voucherId   String
  code        String   @unique
  status      String   @default("ACTIVE")
  maxUses     Int      @default(1)
  usedCount   Int      @default(0)
  validFrom   DateTime?
  validUntil  DateTime?
  createdAt   DateTime @default(now())

  voucher     Voucher  @relation(fields: [voucherId], references: [id])
  usages      VoucherUsage[]
}

model VoucherUsage {
  id          String   @id @default(cuid())
  voucherId   String
  codeId      String?
  customerId  String
  orderId     String?
  amount      Int
  metadata    Json?
  usedAt      DateTime @default(now())
  createdAt   DateTime @default(now())

  voucher     Voucher    @relation(fields: [voucherId], references: [id])
  code        VoucherCode? @relation(fields: [codeId], references: [id])
  customer    Customer   @relation(fields: [customerId], references: [id])

  @@unique([voucherId, customerId, orderId])
}

model Payment {
  id                String    @id @default(cuid())
  subscriptionId    String
  amount            Int
  currency          String    @default("RUB")
  status            String
  paymentMethod     String?
  invoiceId         String?
  receiptUrl        String?
  failureReason     String?
  paidAt            DateTime?
  provider          String?
  merchantId        String?
  metadata          Json?
  refundedAt        DateTime?
  createdAt         DateTime  @default(now())

  subscription      Subscription @relation(fields: [subscriptionId], references: [id])
}

model FraudCheck {
  id                String    @id @default(cuid())
  merchantId        String
  customerId        String
  transactionId     String?
  riskScore         Int
  riskLevel         String
  factors           String[]
  blocked           Boolean   @default(false)
  reviewed          Boolean   @default(false)
  reviewedBy        String?
  reviewNotes       String?
  metadata          Json?
  createdAt         DateTime  @default(now())

  merchant          Merchant  @relation(fields: [merchantId], references: [id])
}

model Integration {
  id                String    @id @default(cuid())
  merchantId        String
  type              String
  provider          String
  config            Json
  credentials       Json?
  isActive          Boolean   @default(true)
  lastSync          DateTime?
  errorCount        Int       @default(0)
  lastError         String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  merchant          Merchant  @relation(fields: [merchantId], references: [id])
}

model SyncLog {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  merchantId    String?
  integrationId String?
  provider      String?
  direction     String   // IN | OUT
  endpoint      String?
  status        String?  // ok | error
  request       Json?
  response      Json?
  error         String?
  retryCount    Int      @default(0)
  nextRetryAt   DateTime?

  @@index([merchantId, createdAt])
  @@index([integrationId, createdAt])
}

model CustomerSegment {
  id                String    @id @default(cuid())
  merchantId        String
  name              String
  description       String?
  type              String    @default("DYNAMIC")
  rules             Json
  customerCount     Int       @default(0)
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  merchant          Merchant  @relation(fields: [merchantId], references: [id])
  campaigns         Campaign[]
  customers         SegmentCustomer[]
}

model Campaign {
  id                String    @id @default(cuid())
  merchantId        String
  name              String
  description       String?
  type              String
  status            String    @default("draft")
  segmentId         String?
  content           Json
  schedule          Json?
  metrics           Json?
  startAt           DateTime?
  endAt             DateTime?
  startDate         DateTime?
  endDate           DateTime?
  budget            Int?
  maxUsageTotal     Int?
  maxUsagePerCustomer Int?
  notificationChannels String[]
  targetSegmentId   String?
  reward            Json?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  merchant          Merchant  @relation(fields: [merchantId], references: [id])
  segment           CustomerSegment? @relation(fields: [segmentId], references: [id])
  usages            CampaignUsage[]
}

// Reviews system
model Review {
  id                String    @id @default(cuid())
  merchantId        String
  customerId        String
  orderId           String?
  rating            Int
  title             String?
  comment           String
  photos            String[]
  tags              String[]
  isAnonymous       Boolean   @default(false)
  status            String    @default("PENDING")
  helpfulCount      Int       @default(0)
  notHelpfulCount   Int       @default(0)
  rewardPoints      Int       @default(0)
  moderatedAt       DateTime?
  moderatedBy       String?
  moderationReason  String?
  metadata          Json?
  deletedAt         DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  merchant          Merchant  @relation(fields: [merchantId], references: [id])
  customer          Customer  @relation(fields: [customerId], references: [id])
  response          ReviewResponse?
  reactions         ReviewReaction[]
}

model ReviewResponse {
  id                String    @id @default(cuid())
  reviewId          String    @unique
  staffId           String?
  message           String
  merchantId        String?
  createdAt         DateTime  @default(now())

  review            Review    @relation(fields: [reviewId], references: [id])
  staff             Staff?    @relation(fields: [staffId], references: [id])
}

model ReviewReaction {
  id                String    @id @default(cuid())
  reviewId          String
  customerId        String
  type              String
  createdAt         DateTime  @default(now())

  review            Review    @relation(fields: [reviewId], references: [id])
  customer          Customer  @relation(fields: [customerId], references: [id])

  @@unique([reviewId, customerId])
}

// Aggregated per-customer stats per merchant
model CustomerStats {
  merchantId   String
  customerId   String
  firstSeenAt  DateTime @default(now())
  lastSeenAt   DateTime @default(now())
  lastOrderAt  DateTime?
  visits       Int      @default(0)
  totalSpent   Int      @default(0)
  avgCheck     Float    @default(0)
  rfmR         Int?
  rfmF         Int?
  rfmM         Int?
  rfmScore     Int?
  rfmClass     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  merchant     Merchant @relation(fields: [merchantId], references: [id])
  customer     Customer @relation(fields: [customerId], references: [id])

  @@id([merchantId, customerId])
  @@index([merchantId, updatedAt])
}

// Daily KPIs per merchant
model MerchantKpiDaily {
  id               String   @id @default(cuid())
  merchantId       String
  date             DateTime
  revenue          Int      @default(0)
  transactionCount Int      @default(0)
  averageCheck     Float    @default(0)
  newCustomers     Int      @default(0)
  activeCustomers  Int      @default(0)
  pointsIssued     Int      @default(0)
  pointsRedeemed   Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  merchant         Merchant @relation(fields: [merchantId], references: [id])

  @@unique([merchantId, date])
  @@index([merchantId, date])
}

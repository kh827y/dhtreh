import {
  Controller,
  Get,
  Query,
  Param,
  UseGuards,
  Res,
  HttpException,
  HttpStatus,
} from '@nestjs/common';
import type { Response } from 'express';
import { ApiTags, ApiOperation, ApiResponse, ApiBearerAuth, ApiQuery } from '@nestjs/swagger';
import { ReportService, ReportOptions } from './report.service';
import { ApiKeyGuard } from '../guards/api-key.guard';

@ApiTags('Reports')
@Controller('reports')
@UseGuards(ApiKeyGuard)
@ApiBearerAuth()
export class ReportController {
  constructor(private readonly reportService: ReportService) {}

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞
   */
  @Get('export/:merchantId')
  @ApiOperation({ summary: '–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –≤ Excel/PDF/CSV' })
  @ApiQuery({ name: 'type', enum: ['transactions', 'customers', 'loyalty', 'campaigns', 'financial', 'full'], required: true })
  @ApiQuery({ name: 'format', enum: ['excel', 'pdf', 'csv'], required: true })
  @ApiQuery({ name: 'period', enum: ['day', 'week', 'month', 'quarter', 'year'], required: false })
  @ApiQuery({ name: 'from', type: String, required: false, description: 'ISO date string' })
  @ApiQuery({ name: 'to', type: String, required: false, description: 'ISO date string' })
  @ApiResponse({ status: 200, description: '–§–∞–π–ª –æ—Ç—á–µ—Ç–∞' })
  async exportReport(
    @Param('merchantId') merchantId: string,
    @Query('type') type: string,
    @Query('format') format: string,
    @Query('period') periodType?: string,
    @Query('from') from?: string,
    @Query('to') to?: string,
    @Res() res?: Response,
  ) {
    try {
      const period = this.getPeriod(periodType, from, to);
      
      const options: ReportOptions = {
        merchantId,
        type: type as ReportOptions['type'],
        format: format as ReportOptions['format'],
        period,
        language: 'ru',
      };

      const buffer = await this.reportService.generateReport(options);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
      const filename = this.getFilename(type, format, period);
      const contentType = this.getContentType(format);

      res!.set({
        'Content-Type': contentType,
        'Content-Disposition': `attachment; filename="${filename}"`,
        'Content-Length': buffer.length.toString(),
      });

      res!.send(buffer);
    } catch (error) {
      throw new HttpException(
        error.message || '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞',
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  /**
   * –ì–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –æ—Ç—á–µ—Ç–æ–≤
   */
  @Get('templates')
  @ApiOperation({ summary: '–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥–æ—Ç–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –æ—Ç—á–µ—Ç–æ–≤' })
  @ApiResponse({ status: 200, description: '–°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤' })
  async getReportTemplates() {
    return [
      {
        id: 'daily_sales',
        name: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º',
        description: '–í—ã—Ä—É—á–∫–∞, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, —Ç–æ–ø —Ç–æ–≤–∞—Ä—ã –∑–∞ –¥–µ–Ω—å',
        type: 'financial',
        format: 'excel',
        period: 'day',
        icon: 'üìä',
      },
      {
        id: 'monthly_customers',
        name: '–ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º',
        description: '–ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, —Å–µ–≥–º–µ–Ω—Ç—ã',
        type: 'customers',
        format: 'excel',
        period: 'month',
        icon: 'üë•',
      },
      {
        id: 'loyalty_summary',
        name: '–°–≤–æ–¥–∫–∞ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏',
        description: '–ë–∞–ª–ª—ã, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, ROI –ø—Ä–æ–≥—Ä–∞–º–º—ã',
        type: 'loyalty',
        format: 'pdf',
        period: 'month',
        icon: 'üéÅ',
      },
      {
        id: 'campaign_effectiveness',
        name: '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞–∫—Ü–∏–π',
        description: 'ROI –∫–∞–º–ø–∞–Ω–∏–π, –∫–æ–Ω–≤–µ—Ä—Å–∏—è, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ',
        type: 'campaigns',
        format: 'excel',
        period: 'month',
        icon: 'üì¢',
      },
      {
        id: 'full_monthly',
        name: '–ü–æ–ª–Ω—ã–π –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç',
        description: '–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –º–µ—Å—è—Ü –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ',
        type: 'full',
        format: 'excel',
        period: 'month',
        icon: 'üìö',
      },
      {
        id: 'tax_report',
        name: '–ù–∞–ª–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç',
        description: '–î–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞–ª–æ–≥–æ–≤–æ–π –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏',
        type: 'financial',
        format: 'excel',
        period: 'quarter',
        icon: 'üè¶',
      },
    ];
  }

  /**
   * –ë—ã—Å—Ç—Ä—ã–π —ç–∫—Å–ø–æ—Ä—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
   */
  @Get('quick/transactions/:merchantId')
  @ApiOperation({ summary: '–ë—ã—Å—Ç—Ä—ã–π —ç–∫—Å–ø–æ—Ä—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è –≤ CSV' })
  @ApiResponse({ status: 200, description: 'CSV —Ñ–∞–π–ª —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏' })
  async quickTransactionsExport(
    @Param('merchantId') merchantId: string,
    @Res() res?: Response,
  ) {
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const tomorrow = new Date(today);
    tomorrow.setDate(tomorrow.getDate() + 1);

    const options: ReportOptions = {
      merchantId,
      type: 'transactions',
      format: 'csv',
      period: {
        from: today,
        to: tomorrow,
        type: 'day',
      },
      language: 'ru',
    };

    const buffer = await this.reportService.generateReport(options);
    const filename = `transactions_${today.toISOString().split('T')[0]}.csv`;

    res!.set({
      'Content-Type': 'text/csv; charset=utf-8',
      'Content-Disposition': `attachment; filename="${filename}"`,
      'Content-Length': buffer.length.toString(),
    });

    res!.send(buffer);
  }

  /**
   * –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Ç—á–µ—Ç–æ–≤
   */
  @Get('schedule/:merchantId')
  @ApiOperation({ summary: '–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤' })
  @ApiResponse({ status: 200, description: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤' })
  async getReportSchedule(@Param('merchantId') merchantId: string) {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
    return {
      merchantId,
      schedules: [
        {
          id: 'daily_1',
          name: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç',
          type: 'financial',
          format: 'excel',
          period: 'day',
          frequency: 'daily',
          time: '09:00',
          email: 'owner@business.ru',
          enabled: true,
        },
        {
          id: 'weekly_1',
          name: '–ù–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞',
          type: 'full',
          format: 'pdf',
          period: 'week',
          frequency: 'weekly',
          dayOfWeek: 1, // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
          time: '10:00',
          email: 'owner@business.ru',
          enabled: true,
        },
        {
          id: 'monthly_1',
          name: '–ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç',
          type: 'full',
          format: 'excel',
          period: 'month',
          frequency: 'monthly',
          dayOfMonth: 1,
          time: '08:00',
          email: 'owner@business.ru',
          enabled: false,
        },
      ],
    };
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

  private getPeriod(
    periodType?: string,
    fromStr?: string,
    toStr?: string,
  ): ReportOptions['period'] {
    const now = new Date();
    let from = new Date();
    let to = new Date();

    if (fromStr && toStr) {
      from = new Date(fromStr);
      to = new Date(toStr);
      return { from, to, type: 'custom' };
    }

    switch (periodType) {
      case 'day':
        from.setHours(0, 0, 0, 0);
        to.setHours(23, 59, 59, 999);
        break;
      
      case 'week':
        const dayOfWeek = from.getDay();
        const diff = from.getDate() - dayOfWeek + (dayOfWeek === 0 ? -6 : 1);
        from.setDate(diff);
        from.setHours(0, 0, 0, 0);
        to = new Date(from);
        to.setDate(to.getDate() + 6);
        to.setHours(23, 59, 59, 999);
        break;
      
      case 'month':
        from.setDate(1);
        from.setHours(0, 0, 0, 0);
        to = new Date(from);
        to.setMonth(to.getMonth() + 1);
        to.setDate(0);
        to.setHours(23, 59, 59, 999);
        break;
      
      case 'quarter':
        const quarter = Math.floor(from.getMonth() / 3);
        from.setMonth(quarter * 3);
        from.setDate(1);
        from.setHours(0, 0, 0, 0);
        to = new Date(from);
        to.setMonth(to.getMonth() + 3);
        to.setDate(0);
        to.setHours(23, 59, 59, 999);
        break;
      
      case 'year':
        from.setMonth(0);
        from.setDate(1);
        from.setHours(0, 0, 0, 0);
        to.setMonth(11);
        to.setDate(31);
        to.setHours(23, 59, 59, 999);
        break;
      
      default:
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        from.setDate(1);
        from.setHours(0, 0, 0, 0);
        to = new Date(from);
        to.setMonth(to.getMonth() + 1);
        to.setDate(0);
        to.setHours(23, 59, 59, 999);
    }

    return {
      from,
      to,
      type: (periodType as any) || 'month',
    };
  }

  private getFilename(type: string, format: string, period: any): string {
    const date = new Date().toISOString().split('T')[0];
    const typeLabels: Record<string, string> = {
      transactions: '—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏',
      customers: '–∫–ª–∏–µ–Ω—Ç—ã',
      loyalty: '–ª–æ—è–ª—å–Ω–æ—Å—Ç—å',
      campaigns: '–∞–∫—Ü–∏–∏',
      financial: '—Ñ–∏–Ω–∞–Ω—Å—ã',
      full: '–ø–æ–ª–Ω—ã–π_–æ—Ç—á–µ—Ç',
    };
    
    const extension = format === 'excel' ? 'xlsx' : format;
    return `${typeLabels[type] || type}_${date}.${extension}`;
  }

  private getContentType(format: string): string {
    switch (format) {
      case 'excel':
        return 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
      case 'pdf':
        return 'application/pdf';
      case 'csv':
        return 'text/csv; charset=utf-8';
      default:
        return 'application/octet-stream';
    }
  }
}

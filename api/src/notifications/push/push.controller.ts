import {
  Controller,
  Post,
  Get,
  Delete,
  Body,
  Param,
  Query,
  UseGuards,
} from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse, ApiBearerAuth } from '@nestjs/swagger';
import { PushService } from './push.service';
import type { RegisterDeviceDto, SendPushDto } from './push.service';
import { ApiKeyGuard } from '../../guards/api-key.guard';

@ApiTags('Push Notifications')
@Controller('push')
@UseGuards(ApiKeyGuard)
@ApiBearerAuth()
export class PushController {
  constructor(private readonly pushService: PushService) {}

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
   */
  @Post('device/register')
  @ApiOperation({ summary: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π' })
  @ApiResponse({ status: 200, description: '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ' })
  async registerDevice(@Body() dto: RegisterDeviceDto) {
    return this.pushService.registerDevice(dto);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   */
  @Post('send')
  @ApiOperation({ summary: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ' })
  @ApiResponse({ status: 200, description: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' })
  async sendPush(@Body() dto: SendPushDto) {
    return this.pushService.sendPush(dto);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ —Ç–æ–ø–∏–∫—É
   */
  @Post('topic/:merchantId')
  @ApiOperation({ summary: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –º–µ—Ä—á–∞–Ω—Ç–∞' })
  @ApiResponse({ status: 200, description: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' })
  async sendToTopic(
    @Param('merchantId') merchantId: string,
    @Body() dto: {
      title: string;
      body: string;
      data?: Record<string, string>;
    },
  ) {
    return this.pushService.sendToTopic(merchantId, dto.title, dto.body, dto.data);
  }

  /**
   * –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
   */
  @Delete('device/:outletId')
  @ApiOperation({ summary: '–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ' })
  @ApiResponse({ status: 200, description: '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ' })
  async deactivateDevice(@Param('outletId') outletId: string) {
    await this.pushService.deactivateDevice(outletId);
    return { success: true };
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  @Get('stats/:merchantId')
  @ApiOperation({ summary: '–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π' })
  @ApiResponse({ status: 200, description: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ push' })
  async getPushStats(
    @Param('merchantId') merchantId: string,
    @Query('from') from?: string,
    @Query('to') to?: string,
  ) {
    const period = from && to ? {
      from: new Date(from),
      to: new Date(to),
    } : undefined;

    return this.pushService.getPushStats(merchantId, period);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —à–∞–±–ª–æ–Ω—ã push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  @Get('templates')
  @ApiOperation({ summary: '–ü–æ–ª—É—á–∏—Ç—å –≥–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π' })
  @ApiResponse({ status: 200, description: '–°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤' })
  async getPushTemplates() {
    return this.pushService.getPushTemplates();
  }

  /**
   * –¢–µ—Å—Ç–æ–≤–æ–µ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   */
  @Post('test/:customerId')
  @ApiOperation({ summary: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ' })
  @ApiResponse({ status: 200, description: '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' })
  async sendTestPush(@Param('customerId') customerId: string) {
    const customer = await this.pushService.getCustomerWithDevice(customerId);
    
    if (!customer) {
      return { 
        success: false, 
        message: '–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤' 
      };
    }

    return this.pushService.sendPush({
      merchantId: customer.merchantId,
      customerId,
      title: 'üéâ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
      body: '–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!',
      type: 'SYSTEM',
      priority: 'high',
      data: {
        test: 'true',
        timestamp: new Date().toISOString(),
      },
    });
  }
}

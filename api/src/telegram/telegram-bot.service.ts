import { Injectable, Logger } from '@nestjs/common';
import { PrismaService } from '../prisma.service';
import { ConfigService } from '@nestjs/config';
import * as crypto from 'crypto';

interface BotConfig {
  token: string;
  username: string;
  merchantId: string;
  webhookUrl: string;
}

@Injectable()
export class TelegramBotService {
  private readonly logger = new Logger(TelegramBotService.name);
  private bots: Map<string, BotConfig> = new Map();

  constructor(
    private prisma: PrismaService,
    private configService: ConfigService,
  ) {
    this.loadBots();
  }

  async loadBots() {
    // –í —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ –∏ –ø—Ä–∏ —Å—Ç–∞–±–µ Prisma (–±–µ–∑ –º–æ–¥–µ–ª–µ–π) ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if (process.env.NODE_ENV === 'test') return;
    const prismaAny = this.prisma as any;
    if (!prismaAny?.merchantSettings?.findMany) return;
    try {
      const merchants = await prismaAny.merchantSettings.findMany({
        where: {
          telegramBotToken: { not: null },
          telegramBotUsername: { not: null },
        },
      });

      for (const merchant of merchants) {
        if (merchant.telegramBotToken && merchant.telegramBotUsername) {
          const webhookUrl = `${this.configService.get('API_BASE_URL')}/telegram/webhook/${merchant.merchantId}`;
          
          this.bots.set(merchant.merchantId, {
            token: merchant.telegramBotToken,
            username: merchant.telegramBotUsername,
            merchantId: merchant.merchantId,
            webhookUrl,
          });

          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –¥–ª—è –±–æ—Ç–∞
          await this.setupWebhook(merchant.merchantId);
        }
      }

      this.logger.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.bots.size} –±–æ—Ç–æ–≤`);
    } catch (error) {
      // –í —Ç–µ—Å—Ç–∞—Ö –Ω–µ —à—É–º–∏–º –ª–æ–≥–∞–º–∏
      if (process.env.NODE_ENV !== 'test') {
        this.logger.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–æ–≤:', error);
      }
    }
  }

  async registerBot(merchantId: string, botToken: string) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
      const botInfo = await this.getBotInfo(botToken);
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º URL –≤–µ–±—Ö—É–∫–∞ –∏ —Å–µ–∫—Ä–µ—Ç
      const webhookUrl = `${this.configService.get('API_BASE_URL')}/telegram/webhook/${merchantId}`;
      const secret = crypto.randomBytes(16).toString('hex');

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ—Ä—á–∞–Ω—Ç–∞ (–¥–ª—è MiniApp –∏ –±—ç–∫–∞–ø–∞ —Ç–æ–∫–µ–Ω–∞)
      await this.prisma.merchantSettings.update({
        where: { merchantId },
        data: {
          telegramBotToken: botToken,
          telegramBotUsername: botInfo.username,
          miniappBaseUrl: `${this.configService.get('MINIAPP_BASE_URL')}?merchant=${merchantId}`,
        },
      });

      // –°–æ–∑–¥–∞—ë–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å TelegramBot —Å —Å–µ–∫—Ä–µ—Ç–æ–º –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ö—É–∫–∞
      await this.prisma.telegramBot.upsert({
        where: { merchantId },
        update: {
          botToken: botToken,
          botUsername: botInfo.username,
          botId: String(botInfo.id),
          webhookUrl,
          webhookSecret: secret,
          isActive: true,
        },
        create: {
          merchantId,
          botToken: botToken,
          botUsername: botInfo.username,
          botId: String(botInfo.id),
          webhookUrl,
          webhookSecret: secret,
          isActive: true,
        },
      });

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook —Å —Å–µ–∫—Ä–µ—Ç–æ–º
      await this.setWebhook(botToken, webhookUrl, secret);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
      await this.setBotCommands(botToken);

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç—å
      this.bots.set(merchantId, {
        token: botToken,
        username: botInfo.username,
        merchantId,
        webhookUrl,
      });

      return {
        success: true,
        username: botInfo.username,
        webhookUrl,
      };
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞ –¥–ª—è ${merchantId}:`, error);
      throw error;
    }
  }

  async setupWebhook(merchantId: string) {
    const bot = this.bots.get(merchantId);
    if (!bot) return;

    try {
      // –ü–æ–ø—Ä–æ–±—É–µ–º –¥–æ—Å—Ç–∞—Ç—å —Å–µ–∫—Ä–µ—Ç –∏–∑ —Ç–∞–±–ª–∏—Ü—ã TelegramBot; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞–¥–∏–º/–æ–±–Ω–æ–≤–∏–º —Å –Ω–æ–≤—ã–º —Å–µ–∫—Ä–µ—Ç–æ–º
      let botRow = await this.prisma.telegramBot.findUnique({ where: { merchantId } }).catch(() => null);
      let secret = botRow?.webhookSecret || undefined;
      // –ï—Å–ª–∏ –±–æ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ‚Äî –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
      if (botRow && botRow.isActive === false) {
        try { await this.deleteWebhook(bot.token); } catch {}
        this.logger.log(`–ë–æ—Ç ${merchantId} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ‚Äî webhook —É–¥–∞–ª–µ–Ω/–Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è`);
        return;
      }
      if (!botRow || !secret) {
        secret = crypto.randomBytes(16).toString('hex');
        botRow = await this.prisma.telegramBot.upsert({
          where: { merchantId },
          update: {
            botToken: bot.token,
            botUsername: bot.username,
            webhookUrl: bot.webhookUrl,
            webhookSecret: secret,
            isActive: true,
          },
          create: {
            merchantId,
            botToken: bot.token,
            botUsername: bot.username,
            webhookUrl: bot.webhookUrl,
            webhookSecret: secret,
            isActive: true,
          },
        });
      }
      await this.setWebhook(bot.token, bot.webhookUrl, secret);
      this.logger.log(`Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è ${merchantId}`);
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook –¥–ª—è ${merchantId}:`, error);
    }
  }

  private async setWebhook(token: string, url: string, secretToken?: string) {
    const response = await fetch(`https://api.telegram.org/bot${token}/setWebhook`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        url,
        secret_token: secretToken,
        allowed_updates: ['message', 'callback_query', 'inline_query'],
        drop_pending_updates: true,
      }),
    });

    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: ${await response.text()}`);
    }

    return response.json();
  }

  private async getBotInfo(token: string) {
    const response = await fetch(`https://api.telegram.org/bot${token}/getMe`);
    if (!response.ok) {
      throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞: ${await response.text()}`);
    }

    const data = await response.json();
    return {
      id: data.result.id,
      username: data.result.username,
      firstName: data.result.first_name,
    };
  }

  private async setBotCommands(token: string) {
    const commands = [
      { command: 'start', description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' },
      { command: 'balance', description: '–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –±–∞–ª–ª–æ–≤' },
      { command: 'miniapp', description: '–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏' },
      { command: 'help', description: '–ü–æ–º–æ—â—å' },
    ];

    await fetch(`https://api.telegram.org/bot${token}/setMyCommands`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ commands }),
    });
  }

  async processWebhook(merchantId: string, update: any) {
    const bot = this.bots.get(merchantId);
    if (!bot) {
      this.logger.warn(`–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –º–µ—Ä—á–∞–Ω—Ç–∞ ${merchantId}`);
      return;
    }

    try {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
      if (update.message?.text) {
        const text = update.message.text;
        const chatId = update.message.chat.id;
        const userId = update.message.from.id;

        if (text.startsWith('/start')) {
          await this.handleStart(bot, chatId, userId, merchantId);
        } else if (text === '/balance') {
          await this.handleBalance(bot, chatId, userId, merchantId);
        } else if (text === '/miniapp') {
          await this.handleMiniApp(bot, chatId, merchantId);
        } else if (text === '/help') {
          await this.handleHelp(bot, chatId);
        }
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
      if (update.callback_query) {
        await this.handleCallbackQuery(bot, update.callback_query, merchantId);
      }
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –¥–ª—è ${merchantId}:`, error);
    }
  }

  private async handleStart(bot: BotConfig, chatId: number, userId: number, merchantId: string) {
    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –∫–ª–∏–µ–Ω—Ç–∞
    const tgId = String(userId);
    let customer = await this.prisma.customer.findUnique({ where: { tgId } });
    
    if (!customer) {
      customer = await this.prisma.customer.create({ data: { tgId } });
    }

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ—Ä—á–∞–Ω—Ç–∞
    const settings = await this.prisma.merchantSettings.findUnique({
      where: { merchantId },
    });

    const message = settings?.miniappThemePrimary 
      ? `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏!\n\n–í–∞—à ID: ${customer.id}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π.`
      : `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏!\n\n–í–∞—à ID: ${customer.id}`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: `${settings?.miniappBaseUrl}` } }
        ],
        [
          { text: 'üí∞ –ë–∞–ª–∞–Ω—Å', callback_data: 'balance' },
          { text: 'üìä –ò—Å—Ç–æ—Ä–∏—è', callback_data: 'history' }
        ],
        [
          { text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' }
        ]
      ]
    };

    await this.sendMessage(bot.token, chatId, message, keyboard);
  }

  private async handleBalance(bot: BotConfig, chatId: number, userId: number, merchantId: string) {
    const tgId = String(userId);
    const customer = await this.prisma.customer.findUnique({ where: { tgId } });
    
    if (!customer) {
      await this.sendMessage(bot.token, chatId, '–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start');
      return;
    }

    const wallet = await this.prisma.wallet.findFirst({
      where: {
        customerId: customer.id,
        merchantId,
        type: 'POINTS',
      },
    });

    const balance = wallet?.balance || 0;
    const message = `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${balance} –±–∞–ª–ª–æ–≤`;

    await this.sendMessage(bot.token, chatId, message);
  }

  private async handleMiniApp(bot: BotConfig, chatId: number, merchantId: string) {
    const settings = await this.prisma.merchantSettings.findUnique({
      where: { merchantId },
    });

    const keyboard = {
      inline_keyboard: [[
        { 
          text: 'üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏', 
          web_app: { url: settings?.miniappBaseUrl || '' } 
        }
      ]]
    };

    await this.sendMessage(
      bot.token, 
      chatId, 
      'üì± –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:', 
      keyboard
    );
  }

  private async handleHelp(bot: BotConfig, chatId: number) {
    const helpText = `
‚ÑπÔ∏è *–ü–æ–º–æ—â—å –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏*

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/balance - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
/miniapp - –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

*–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*
1. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
2. –ü–æ–∫–∞–∂–∏—Ç–µ QR-–∫–æ–¥ –∫–∞—Å—Å–∏—Ä—É –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ
3. –ü–æ–ª—É—á–∞–π—Ç–µ –∏ —Ç—Ä–∞—Ç—å—Ç–µ –±–∞–ª–ª—ã

*–ü—Ä–∞–≤–∏–ª–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:*
‚Ä¢ 5% –æ—Ç —Å—É–º–º—ã –ø–æ–∫—É–ø–∫–∏ –≤ –±–∞–ª–ª–∞—Ö
‚Ä¢ 1 –±–∞–ª–ª = 1 —Ä—É–±–ª—å –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 50% –æ—Ç —á–µ–∫–∞ –º–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –±–∞–ª–ª–∞–º–∏

–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    `;

    await this.sendMessage(bot.token, chatId, helpText, null, 'Markdown');
  }

  private async handleCallbackQuery(bot: BotConfig, query: any, merchantId: string) {
    const chatId = query.message.chat.id;
    const userId = query.from.id;
    const data = query.data;

    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    await this.answerCallbackQuery(bot.token, query.id);

    switch (data) {
      case 'balance':
        await this.handleBalance(bot, chatId, userId, merchantId);
        break;
      case 'history':
        await this.handleTransactionHistory(bot, chatId, userId, merchantId);
        break;
      case 'help':
        await this.handleHelp(bot, chatId);
        break;
    }
  }

  private async handleTransactionHistory(bot: BotConfig, chatId: number, userId: number, merchantId: string) {
    const tgId = String(userId);
    const customer = await this.prisma.customer.findUnique({ where: { tgId } });
    
    if (!customer) {
      await this.sendMessage(bot.token, chatId, '–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start');
      return;
    }

    const transactions = await this.prisma.transaction.findMany({
      where: {
        customerId: customer.id,
        merchantId,
      },
      orderBy: { createdAt: 'desc' },
      take: 5,
    });

    if (transactions.length === 0) {
      await this.sendMessage(bot.token, chatId, 'üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π');
      return;
    }

    let message = 'üìä *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:*\n\n';
    for (const tx of transactions) {
      const emoji = tx.type === 'EARN' ? '‚ûï' : '‚ûñ';
      const date = new Date(tx.createdAt).toLocaleDateString('ru-RU');
      message += `${emoji} ${Math.abs(tx.amount)} –±–∞–ª–ª–æ–≤ (${date})\n`;
    }

    await this.sendMessage(bot.token, chatId, message, null, 'Markdown');
  }

  private async sendMessage(
    token: string, 
    chatId: number, 
    text: string, 
    keyboard?: any,
    parseMode?: string
  ) {
    await fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text,
        reply_markup: keyboard,
        parse_mode: parseMode,
      }),
    });
  }

  private async answerCallbackQuery(token: string, queryId: string) {
    await fetch(`https://api.telegram.org/bot${token}/answerCallbackQuery`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        callback_query_id: queryId,
      }),
    });
  }

  private async deleteWebhook(token: string) {
    const response = await fetch(`https://api.telegram.org/bot${token}/deleteWebhook`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ drop_pending_updates: true }),
    });
    if (!response.ok) {
      this.logger.warn(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook: ${await response.text()}`);
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞–º
  async sendNotification(customerId: string, merchantId: string, message: string) {
    const customer = await this.prisma.customer.findUnique({ where: { id: customerId } });
    if (!customer?.tgId) return;

    const bot = this.bots.get(merchantId);
    if (!bot) return;

    try {
      await this.sendMessage(bot.token, Number(customer.tgId), message);
      return { success: true };
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${error}`);
      return { success: false, error };
    }
  }

  // –ê–¥–º–∏–Ω: —Ä–æ—Ç–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–∞ webhook –±–æ—Ç–∞
  async rotateWebhookSecret(merchantId: string) {
    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Å–µ–∫—Ä–µ—Ç
      const secret = crypto.randomBytes(16).toString('hex');

      // –û–±–Ω–æ–≤–∏–º –∑–∞–ø–∏—Å—å –±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
      const existing = await this.prisma.telegramBot.findUnique({ where: { merchantId } }).catch(() => null);
      if (existing) {
        await this.prisma.telegramBot.update({
          where: { merchantId },
          data: { webhookSecret: secret, isActive: true },
        });

        // –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏–º webhook —Å –Ω–æ–≤—ã–º —Å–µ–∫—Ä–µ—Ç–æ–º
        const webhookUrl = `${this.configService.get('API_BASE_URL')}/telegram/webhook/${merchantId}`;
        await this.setWebhook(existing.botToken, webhookUrl, secret);
      } else {
        // –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, –Ω–æ –±–æ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ—Ä—á–∞–Ω—Ç–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∏–º webhook —Å —Å–µ–∫—Ä–µ—Ç–æ–º
        const settings = await this.prisma.merchantSettings.findUnique({ where: { merchantId } });
        if (settings?.telegramBotToken) {
          const webhookUrl = `${this.configService.get('API_BASE_URL')}/telegram/webhook/${merchantId}`;
          await this.setWebhook(settings.telegramBotToken, webhookUrl, secret);
        }
      }
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ webhook —Å–µ–∫—Ä–µ—Ç–∞ –¥–ª—è ${merchantId}:`, error);
      throw error;
    }
  }

  // –ê–¥–º–∏–Ω: –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞ (—É–¥–∞–ª–µ–Ω–∏–µ webhook –∏ –æ—Ç–º–µ—Ç–∫–∞ –≤ –ë–î)
  async deactivateBot(merchantId: string) {
    try {
      const existing = await this.prisma.telegramBot.findUnique({ where: { merchantId } }).catch(() => null);
      if (existing) {
        await this.deleteWebhook(existing.botToken);
        await this.prisma.telegramBot.update({ where: { merchantId }, data: { isActive: false } });
      } else {
        // –ü–æ–ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å webhook –ø–æ —Ç–æ–∫–µ–Ω—É –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–µ—Ä—á–∞–Ω—Ç–∞
        const settings = await this.prisma.merchantSettings.findUnique({ where: { merchantId } });
        if (settings?.telegramBotToken) {
          await this.deleteWebhook(settings.telegramBotToken);
        }
      }
      // –õ–æ–∫–∞–ª—å–Ω–æ —Ç–æ–∂–µ —É–±–µ—Ä–µ–º –±–æ—Ç–∞ –∏–∑ –∫–∞—Ä—Ç—ã
      this.bots.delete(merchantId);
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ—Ç–∞ –¥–ª—è ${merchantId}:`, error);
      throw error;
    }
  }
}

"use client";

import React from "react";
import { Card } from "@loyalty/ui";
import Toggle from "../../../components/Toggle";

type MechanicCard = {
  id: string;
  title: string;
  description: string;
  icon: string;
  href: string;
  toggle?: boolean;
};

const cards: MechanicCard[] = [
  {
    id: "levels",
    title: "–£—Ä–æ–≤–Ω–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤",
    description: "–°—Ç—É–ø–µ–Ω–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ —É—Å–ª–æ–≤–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞",
    icon: "üèÜ",
    href: "/loyalty/mechanics/levels",
  },
  {
    id: "redeem-limits",
    title: "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤ –±–∞–ª–ª–∞—Ö –∑–∞ –ø–æ–∫—É–ø–∫–∏",
    description: "–°—Ä–æ–∫ –∂–∏–∑–Ω–∏, –∑–∞–ø—Ä–µ—Ç—ã –∏ –∑–∞–¥–µ—Ä–∂–∫–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è",
    icon: "‚öñÔ∏è",
    href: "/loyalty/mechanics/redeem-limits",
  },
  {
    id: "auto-return",
    title: "–ê–≤—Ç–æ–≤–æ–∑–≤—Ä–∞—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤",
    description: "–í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ–¥–∞—Ä–æ—á–Ω—ã–º–∏ –±–∞–ª–ª–∞–º–∏",
    icon: "üîÅ",
    href: "/loyalty/mechanics/auto-return",
    toggle: true,
  },
  {
    id: "birthday",
    title: "–ü–æ–∑–¥—Ä–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è",
    description: "–ê–≤—Ç–æ–ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø–æ–¥–∞—Ä–∫–∏ –∫ –ø—Ä–∞–∑–¥–Ω–∏–∫—É",
    icon: "üéÇ",
    href: "/loyalty/mechanics/birthday",
    toggle: true,
  },
  {
    id: "registration-bonus",
    title: "–ë–∞–ª–ª—ã –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é",
    description: "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å –Ω–æ–≤—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º",
    icon: "üéÅ",
    href: "/loyalty/mechanics/registration-bonus",
    toggle: true,
  },
  {
    id: "ttl",
    title: "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–≥–æ—Ä–∞–Ω–∏–∏ –±–∞–ª–ª–æ–≤",
    description: "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ —Å–∫–æ—Ä–æ–º —Å–≥–æ—Ä–∞–Ω–∏–∏",
    icon: "‚è≥",
    href: "/loyalty/mechanics/ttl",
    toggle: true,
  },
  {
    id: "referral",
    title: "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞",
    description: "–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π",
    icon: "ü§ù",
    href: "/referrals/program",
    toggle: true,
  },
];

export default function MechanicsPage() {
  const [enabled, setEnabled] = React.useState<Record<string, boolean>>({});
  const [settings, setSettings] = React.useState<Record<string, any>>({});
  const [saving, setSaving] = React.useState<Record<string, boolean>>({});
  const [error, setError] = React.useState<string>("");

  const loadAll = React.useCallback(async () => {
    setError("");
    try {
      const endpoints: Record<string, string> = {
        "auto-return": "/api/portal/loyalty/auto-return",
        birthday: "/api/portal/loyalty/birthday",
        "registration-bonus": "/api/portal/loyalty/registration-bonus",
        ttl: "/api/portal/loyalty/ttl",
        referral: "/api/portal/referrals/program",
      };
      const ids = Object.keys(endpoints);
      const responses = await Promise.all(
        ids.map(async (id) => {
          const res = await fetch(endpoints[id]);
          const json = await res.json().catch(() => ({}));
          if (!res.ok) throw new Error(json?.message || `–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å ${id}`);
          return { id, json } as const;
        })
      );
      const nextEnabled: Record<string, boolean> = {};
      const nextSettings: Record<string, any> = {};
      for (const { id, json } of responses) {
        nextEnabled[id] = Boolean(json?.enabled);
        nextSettings[id] = json;
      }
      setEnabled(nextEnabled);
      setSettings(nextSettings);
    } catch (e: any) {
      setError(String(e?.message || e || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ö–∞–Ω–∏–∫"));
    }
  }, []);

  React.useEffect(() => {
    void loadAll();
  }, [loadAll]);

  const handleToggle = React.useCallback(async (id: string, value: boolean) => {
    setError("");
    setSaving((prev) => ({ ...prev, [id]: true }));
    try {
      const endpointMap: Record<string, string> = {
        "auto-return": "/api/portal/loyalty/auto-return",
        birthday: "/api/portal/loyalty/birthday",
        "registration-bonus": "/api/portal/loyalty/registration-bonus",
        ttl: "/api/portal/loyalty/ttl",
        referral: "/api/portal/referrals/program",
      };
      const current = settings[id] || {};
      let payload: Record<string, any> = {};
      if (id === "auto-return") {
        payload = {
          enabled: value,
          days: Number(current.days || 45),
          text: String(current.text || "–ú—ã —Å–∫—É—á–∞–µ–º! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã."),
          giftEnabled: Boolean(current.giftEnabled),
          giftPoints: Number(current.giftPoints || 0),
          giftBurnEnabled: Boolean(current.giftBurnEnabled),
          giftTtlDays: Number(current.giftTtlDays || 0),
          repeatEnabled: Boolean(current.repeatEnabled),
          repeatDays: Number(current.repeatDays || 0),
        };
      } else if (id === "birthday") {
        payload = {
          enabled: value,
          daysBefore: Number(current.daysBefore || 5),
          onlyBuyers: Boolean(current.onlyBuyers),
          text: String(current.text || "–° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è! –ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è –≤–∞—Å –ø–æ–¥–∞—Ä–æ–∫ –≤ –ª—é–±–∏–º–æ–π –∫–æ—Ñ–µ–π–Ω–µ."),
          giftEnabled: Boolean(current.giftEnabled),
          giftPoints: Number(current.giftPoints || 0),
          giftBurnEnabled: Boolean(current.giftBurnEnabled),
          giftTtlDays: Number(current.giftTtlDays || 0),
        };
      } else if (id === "registration-bonus") {
        const points = Number(current.points || 0);
        if (value && (!Number.isFinite(points) || points <= 0)) {
          throw new Error("–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –±–∞–ª–ª–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –º–µ—Ö–∞–Ω–∏–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
        }
        payload = {
          enabled: value,
          points,
          burnEnabled: Boolean(current.burnEnabled),
          burnTtlDays: Number(current.burnTtlDays || 0),
          delayEnabled: Boolean(current.delayEnabled),
          delayDays: Number(current.delayDays || 0),
        };
      } else if (id === "ttl") {
        payload = {
          enabled: value,
          daysBefore: Number(current.daysBefore || 5),
          text: String(
            current.text || "–ë–∞–ª–ª—ã –≤ —Ä–∞–∑–º–µ—Ä–µ %amount% —Å–≥–æ—Ä—è—Ç %burn_date%. –£—Å–ø–µ–π—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è!"
          ),
        };
      } else if (id === "referral") {
        const placeholders = Array.isArray(current.placeholders) && current.placeholders.length
          ? current.placeholders
          : ["{businessname}", "{bonusamount}", "{code}", "{link}"];
        const multiLevel = Boolean(current.multiLevel);
        const base: Record<string, any> = {
          enabled: value,
          rewardTrigger: current.rewardTrigger === "all" ? "all" : "first",
          rewardType: current.rewardType === "percent" ? "percent" : "fixed",
          multiLevel,
          stackWithRegistration: Boolean(current.stackWithRegistration),
          friendReward: Number(current.friendReward || 0),
          message: typeof current.message === "string" ? current.message : "",
          placeholders,
        };
        if (multiLevel) {
          const levels = Array.isArray(current.levels) ? current.levels : [];
          base.levels = levels.map((lvl: any) => ({
            level: Number(lvl?.level || 0),
            enabled: Boolean(lvl?.enabled),
            reward: Number(lvl?.reward || 0),
          }));
        } else {
          base.rewardValue = Number(current.rewardValue || 0);
        }
        payload = base;
      }

      const res = await fetch(endpointMap[id], {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });
      if (!res.ok) {
        const txt = await res.text().catch(() => "");
        throw new Error(txt || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É");
      }
      setEnabled((prev) => ({ ...prev, [id]: value }));
      setSettings((prev) => ({ ...prev, [id]: { ...current, enabled: value } }));
    } catch (e: any) {
      setError(String(e?.message || e || "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"));
    } finally {
      setSaving((prev) => ({ ...prev, [id]: false }));
    }
  }, [settings]);

  return (
    <div style={{ display: "grid", gap: 24 }}>
      <div>
        <div style={{ fontSize: 28, fontWeight: 700, marginBottom: 6 }}>–ú–µ—Ö–∞–Ω–∏–∫–∏</div>
        <div style={{ fontSize: 14, opacity: 0.7 }}>–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤</div>
      </div>

      <div
        style={{
          display: "grid",
          gap: 16,
          gridTemplateColumns: "repeat(auto-fill, minmax(260px, 1fr))",
        }}
      >
        {cards.map((card) => {
          const showToggle = Boolean(card.toggle);
          const isOn = enabled[card.id];
          return (
            <Card key={card.id} style={{ display: "flex", flexDirection: "column", justifyContent: "space-between", padding: 20 }}>
              <button
                onClick={() => (window.location.href = card.href)}
                style={{
                  all: "unset",
                  display: "grid",
                  gap: 12,
                  cursor: "pointer",
                }}
              >
                <div
                  aria-hidden
                  style={{
                    width: 48,
                    height: 48,
                    borderRadius: 14,
                    background: "rgba(148,163,184,0.12)",
                    display: "grid",
                    placeItems: "center",
                    fontSize: 24,
                  }}
                >
                  {card.icon}
                </div>
                <div style={{ display: "grid", gap: 6 }}>
                  <div style={{ fontSize: 18, fontWeight: 600 }}>{card.title}</div>
                  <div style={{ fontSize: 13, opacity: 0.7, lineHeight: 1.45 }}>{card.description}</div>
                </div>
              </button>

              <div style={{ marginTop: 18, display: "flex", justifyContent: "space-between", alignItems: "center" }}>
                <a
                  href={card.href}
                  style={{ color: "var(--brand-primary)", fontSize: 13, textDecoration: "none" }}
                >
                  –û—Ç–∫—Ä—ã—Ç—å
                </a>
                {showToggle && (
                  <Toggle
                    checked={!!isOn}
                    onChange={(value) => handleToggle(card.id, value)}
                    label={isOn ? "–í–∫–ª—é—á–µ–Ω–æ" : "–û—Ç–∫–ª—é—á–µ–Ω–æ"}
                    disabled={!!saving[card.id]}
                  />
                )}
              </div>
            </Card>
          );
        })}
      </div>
      {error && (
        <div style={{ color: '#f87171', fontSize: 13 }}>{error}</div>
      )}
    </div>
  );
}

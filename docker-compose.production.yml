version: '3.8'

services:
  # PostgreSQL основная БД
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: loyalty
      POSTGRES_USER: loyalty
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - loyalty_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U loyalty"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis для кеширования и rate limiting
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - loyalty_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API сервер
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://loyalty:${DB_PASSWORD}@postgres:5432/loyalty
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      ADMIN_KEY: ${ADMIN_KEY}
      QR_JWT_SECRET: ${QR_JWT_SECRET}
      CORS_ORIGINS: ${CORS_ORIGINS}
      API_BASE_URL: ${API_BASE_URL}
      MINIAPP_BASE_URL: ${MINIAPP_BASE_URL}
      SENTRY_DSN: ${SENTRY_DSN}
      WORKERS_ENABLED: 0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - loyalty_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.${DOMAIN}`)"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.api.tls.certresolver=letsencrypt"
      - "traefik.http.services.api.loadbalancer.server.port=3000"
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # Worker для фоновых задач
  worker:
    build:
      context: ./api
      dockerfile: Dockerfile
    restart: unless-stopped
    command: npm run start:worker
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://loyalty:${DB_PASSWORD}@postgres:5432/loyalty
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      NO_HTTP: 1
      WORKERS_ENABLED: 1
      WEBHOOK_WORKERS: 4
      WEBHOOK_RETRY_DELAY_MS: 5000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - loyalty_network
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # Admin панель
  admin:
    build:
      context: ./admin
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      NODE_ENV: production
      API_BASE: http://api:3000
      ADMIN_KEY: ${ADMIN_KEY}
      ADMIN_SESSION_SECRET: ${ADMIN_SESSION_SECRET}
      ADMIN_UI_ADMIN_PASSWORD: ${ADMIN_UI_ADMIN_PASSWORD}
      ADMIN_UI_MANAGER_PASSWORD: ${ADMIN_UI_MANAGER_PASSWORD}
    depends_on:
      - api
    networks:
      - loyalty_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.admin.rule=Host(`admin.${DOMAIN}`)"
      - "traefik.http.routers.admin.tls=true"
      - "traefik.http.routers.admin.tls.certresolver=letsencrypt"
      - "traefik.http.services.admin.loadbalancer.server.port=3000"
      - "traefik.http.routers.admin.middlewares=admin-auth"
      - "traefik.http.middlewares.admin-auth.basicauth.users=${ADMIN_BASIC_AUTH}"

  # Cashier виртуальный терминал
  cashier:
    build:
      context: ./cashier
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_BASE: https://api.${DOMAIN}
    networks:
      - loyalty_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.cashier.rule=Host(`cashier.${DOMAIN}`)"
      - "traefik.http.routers.cashier.tls=true"
      - "traefik.http.routers.cashier.tls.certresolver=letsencrypt"
      - "traefik.http.services.cashier.loadbalancer.server.port=3000"

  # Miniapp для Telegram
  miniapp:
    build:
      context: ./miniapp
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_BASE: https://api.${DOMAIN}
      NEXT_PUBLIC_QR_TTL: 60
    networks:
      - loyalty_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.miniapp.rule=Host(`app.${DOMAIN}`)"
      - "traefik.http.routers.miniapp.tls=true"
      - "traefik.http.routers.miniapp.tls.certresolver=letsencrypt"
      - "traefik.http.services.miniapp.loadbalancer.server.port=3000"
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # Traefik reverse proxy
  traefik:
    image: traefik:v3.0
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=${ADMIN_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.entrypoint=metrics"
      - "--entrypoints.metrics.address=:8082"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - letsencrypt_data:/letsencrypt
    networks:
      - loyalty_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.middlewares=dashboard-auth"
      - "traefik.http.middlewares.dashboard-auth.basicauth.users=${TRAEFIK_BASIC_AUTH}"

  # Prometheus для метрик
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    volumes:
      - ./infra/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - loyalty_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`metrics.${DOMAIN}`)"
      - "traefik.http.routers.prometheus.tls=true"
      - "traefik.http.routers.prometheus.tls.certresolver=letsencrypt"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
      - "traefik.http.routers.prometheus.middlewares=prometheus-auth"
      - "traefik.http.middlewares.prometheus-auth.basicauth.users=${METRICS_BASIC_AUTH}"

  # Grafana для визуализации
  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - loyalty_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN}`)"
      - "traefik.http.routers.grafana.tls=true"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

  # Backup сервис
  backup:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      BACKUP_SCHEDULE: "0 3 * * *"  # Ежедневно в 3:00
      S3_BUCKET: ${S3_BUCKET}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
    volumes:
      - ./infra/backup:/backup
      - backup_data:/backups
    entrypoint: ["/backup/backup.sh"]
    networks:
      - loyalty_network

networks:
  loyalty_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  letsencrypt_data:
  prometheus_data:
  grafana_data:
  backup_data:

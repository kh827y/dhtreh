name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: loyalty_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9
          
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
          
      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run API tests
        working-directory: ./api
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/loyalty_test
          REDIS_URL: redis://localhost:6379
          QR_JWT_SECRET: test_secret
          ADMIN_KEY: test_admin_key
        run: |
          pnpm prisma generate
          pnpm prisma migrate deploy
          pnpm test
          
      - name: Run API E2E tests
        working-directory: ./api
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/loyalty_test
          REDIS_URL: redis://localhost:6379
        run: pnpm test:e2e
        
      - name: Build API
        working-directory: ./api
        run: pnpm build
        
      - name: Build Admin
        working-directory: ./admin
        run: pnpm build
        
      - name: Build Cashier
        working-directory: ./cashier
        run: pnpm build
        
      - name: Build Miniapp
        working-directory: ./miniapp
        run: pnpm build

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    permissions:
      contents: read
      packages: write
      
    strategy:
      matrix:
        service: [api, admin, cashier, miniapp]
        
    steps:
      - uses: actions/checkout@v3
      
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Deploy to staging
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /opt/loyalty
            git pull origin develop
            docker compose -f docker-compose.staging.yml pull
            docker compose -f docker-compose.staging.yml up -d --remove-orphans
            docker compose -f docker-compose.staging.yml exec -T api pnpm prisma migrate deploy
            
  deploy-production:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Deploy to production
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /opt/loyalty
            git pull origin main
            docker compose -f docker-compose.production.yml pull
            docker compose -f docker-compose.production.yml up -d --remove-orphans --scale api=2 --scale miniapp=2
            docker compose -f docker-compose.production.yml exec -T api pnpm prisma migrate deploy
            
      - name: Run smoke tests
        run: |
          sleep 30
          curl -f https://api.${{ secrets.PRODUCTION_DOMAIN }}/health || exit 1
          curl -f https://app.${{ secrets.PRODUCTION_DOMAIN }} || exit 1
          curl -f https://admin.${{ secrets.PRODUCTION_DOMAIN }} || exit 1
          
      - name: Notify deployment
        if: success()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            âœ… Production deployment successful!
            
            Version: ${{ github.sha }}
            Deployed by: ${{ github.actor }}
            
            Services:
            - API: https://api.${{ secrets.PRODUCTION_DOMAIN }}
            - Admin: https://admin.${{ secrets.PRODUCTION_DOMAIN }}
            - App: https://app.${{ secrets.PRODUCTION_DOMAIN }}
